using System;
using System.Collections.Generic;
using System.Text;

namespace Pins
{
    /// <summary>
    /// Data structure is essentially a list of pins with added, pin-specific functionality
    /// </summary>
    public class PinList
    {
        List<Pin> pins;
        int count;

        /// <summary>
        /// Constructor for pin class
        /// </summary>
        /// <param name="pins">The list of pins to be converted to a PinLIst</param>
        public PinList(List<Pin> pins)
        {
            this.pins = pins;
            count = pins.Count;
        }

        /// <summary>
        /// Constructor for pin class
        /// </summary>
        public PinList()
        {
            this.pins = new List<Pin>();
            count = 0;
        }

        /// <summary>
        /// Determines whether a pin is a member of the list based off of bus size,
        /// pin name and pin polarity
        /// </summary>
        /// <param name="pin">Pin to be added</param>
        /// <returns>Boolean indicating whether add was successful</returns>
        public Boolean Contains(Pin pin)
        {
            return pin.isMember(pins);
        }

        /// <summary>
        /// Adds a pin to the pin list
        /// </summary>
        /// <param name="pin">Pin to be added</param>
        /// <returns>Boolean indicating whether add was successful</returns>
        public Boolean Add(Pin pin)
        {
            if (pin != null)
            {
                pins.Add(pin);
                count++;
                return true;
            }

            return false;
        }

        /// <summary>
        /// Adds a list of pins to the pinlist
        /// </summary>
        /// <param name="addPins">List of pins to be added</param>
        public void AddRange(List<Pin> addPins)
        {
            pins.AddRange(addPins);
            count = pins.Count;
        }

        /// <summary>
        /// Removes a pin from a list of pins
        /// </summary>
        /// <param name="pin">Pin to be removed</param>
        /// <returns>Boolean indicating whether remove was successful</returns>
        public Boolean removePin(Pin pin)
        {
            int index = pin.findIndex(pins);

            if (index < pins.Count)
            {
                pins.RemoveAt(index);
                count--;
                return true;
            }

            return false;
        }

        /// <summary>
        /// Method finds the variable used to represent clock in a list of pins
        /// </summary>
        /// <param name="input">List of pins containing the circuit inputs</param>
        /// <returns>Pin containing the clock variable</returns>
        public Pin clk_var()
        {
            foreach (Pin instance in pins)
            {
                //Checks the input List for any standard clock variable names
                if (instance.PinName.Equals("clk"))
                    return instance;
                else if (instance.PinName.Equals("Clk"))
                    return instance;
                else if (instance.PinName.Equals("CLK"))
                    return instance;
                else if (instance.PinName.Equals("clock"))
                    return instance;
                else if (instance.PinName.Equals("Clock"))
                    return instance;
                else if (instance.PinName.Equals("CLOCK"))
                    return instance;
            }

            //if none is found, variable "auto_clk" is used
            Pin clk = new Pin(PinPolarity.Input, "auto_clock", 1);
            return clk;
        }

        /// <summary>
        /// Method removes clock pin from pin list
        /// </summary>
        /// <param name="clkVar">String containing the name of the clock variable</param>
        /// <param name="input">List of input pins to a circuit</param>
        /// <returns>List of input pins with the clock pin removed</returns>
        public Boolean clk_rm()
        {
            Pin clk = clk_var();

            return clk_rm(clk);
        }

        /// <summary>
        /// Same as removePin except it doesn't fail on "auto_clk"
        /// </summary>
        /// <param name="clkVar">Pin containing the clock variable</param>
        /// <returns>Boolean indicating whether remove succeeded</returns>
        public Boolean clk_rm(Pin clkVar)
        {
            //if the clkVar was automatically generated by the clk_var class, then it
            //shouldn't exist in the inputs, so the program returns
            if (clkVar.PinName.Equals("auto_clk"))
                return true;

            return removePin(clkVar);
        }

        /// <summary>
        /// Removes a pin at a given index
        /// </summary>
        /// <param name="i">Int containing zero-based index of pin to be removed</param>
        public void RemoveAt(int i)
        {
            pins.RemoveAt(i);
        }

        /// <summary>
        /// Returns the list of pins held by the pinlist
        /// </summary>
        public List<Pin> Pins
        {
            get
            {
                return this.pins;
            }
        }

        /// <summary>
        /// Returns the number of pins currently stored in the PinList object
        /// </summary>
        public int Count
        {
            get
            {
                return this.count;
            }
        }

    }
}
